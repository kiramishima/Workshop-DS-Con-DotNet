#!markdown

# Intro Notebooks con C#

Tenemos varias opciones, como escribir codígo o usar Markdown para escribir nuestros articulos y despues mostrar nuestros resultados gracias a la ejecución del codígo.
En este Workshop trabajaremos el caso de nuestro cliente Tailwind Sports.

Así que lo primero que haremos sera cargar nuestras librerías a este espacio de trabajo.

#!markdown

## Trabajando con Nuget Packages desde un Notebook

Para usar las librerias de nuget haremos uso de la siguiente sintaxis : 

```
#r "<nuget package>, <nuget package version>"
```

En este proyecto utilizaremos las sig. librerías:


1. FSharp.Data : Nos permitira trabajar con servicios externos de manera facil.
2. Deedle : Inspirada en pandas, nos permitira trabajar con Dataframes.
3. Plotly.NET : Nos permite crear graficos en HTML muy similar a lo que hace Bokeh y Matplotlib en Python.
4. Newtonsoft.Json : Libreria para trabajar con JSON 

#!csharp

#r "nuget:FSharp.Data"
#r "nuget:Deedle"
#r "nuget: Plotly.NET, 2.0.0-preview.14"
#r "nuget: Plotly.NET.Interactive, 2.0.0-preview.14"
#r "nuget: Newtonsoft.Json"

#!markdown

# Cargando datos en un Dataframe con Deedle

### Para cargar datos desde un archivo, usaremos Deedle, importamos el namespace de Deedle, y posteriormente usamos la siguiente sintaxis:

```
using Deedle;

var df = Deedle.Frame.ReadCsv("archivo.csv", separators: ",", hasHeaders: true);

# hasHeaders en caso de que el archivo CSV cuente con headers en la primera fila
# separators indica el tipo de separadores usados en el CSV, comunmente veremos ",", ";" , "\t" , etc 
```

En este taller usaremos el archivo `tailwind_sports_db.csv` que se encuentra en el directorio de DATASET

#!csharp

using Deedle;
using System;
using System.Globalization;

var df = Deedle.Frame.ReadCsv(@"../DATASET/tailwind_sports_db.csv", separators: ",", hasHeaders: true);

#!markdown

#### Para visualizar los primeros 5 registros del dataframe, debemos usar la propiedad `Rows` y su metodo `Between`. Para imprimir usamos el metodo `Print` al final.


dataframe.<b style="color: purple;">Rows</b>.<b style="color: blue;">Between</b>(<b style="color: green;">indice 1</b>, <b style="color: orange;">indice 2</b>)

#!csharp

df.Rows.Between(0, 5).Print();

#!markdown

#### Para visualizar el listado de columnas que tiene nuestro Dataframe, usamos la propiedad `Columns` y su propiedad `Keys`. Usando el comodin especial `display` podemos visualizar el resultado en el notebook.


<b style="color: orange;">display</b><b style="color: green;">(</b>**dataframe**.<b style="color: purple;">Columns</b>.<b style="color: blue;">Keys</b><b style="color: green;">)</b>

#!csharp

display(df.Columns.Keys)

#!markdown

# Ventas Totales

De acuerdo al documento, Tailwind Sports desea conocer el total de las ventas, para ello debemos hacer la suma de nuestra columna `Ingreso` y aplicar la operacion suma. Así que para seleccionar una columna en especifico de un dataframe, usaremos la siguiente sintaxis:

<b style="color: blue;">df</b>[<b style="color: orange;">columna</b>];

Para aplicar la suma podemos la propiedad `Values`, el cual nos va regresar un Enumerable del tipo de dato, y podemos aplicar `Sum` de `System.Linq` y obtener el resultado. Pero para evitar hacer todo eso, usaremos la clase `Stats` y su metodo `sum`, al cual le pasamos la Serie seleccionada. Ejemplo:

<b style="color: green;">Stats</b>.**sum**(<b style="color: blue;">df</b>[<b style="color: orange;">columna</b>]);
