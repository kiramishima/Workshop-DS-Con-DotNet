#!markdown

# Intro Notebooks con C#

Tenemos varias opciones, como escribir codígo o usar Markdown para escribir nuestros articulos y despues mostrar nuestros resultados gracias a la ejecución del codígo.
En este Workshop trabajaremos el caso de nuestro cliente Tailwind Sports.

Así que lo primero que haremos sera cargar nuestras librerías a este espacio de trabajo.

#!markdown

## Trabajando con Nuget Packages desde un Notebook

Para usar las librerias de nuget haremos uso de la siguiente sintaxis : 

```
#r "<nuget package>, <nuget package version>"
```

En este proyecto utilizaremos las sig. librerías:


1. FSharp.Data : Nos permitira trabajar con servicios externos de manera facil.
2. Deedle : Inspirada en pandas, nos permitira trabajar con Dataframes.
3. XPlot.Plotly : Nos permite crear graficos en HTML muy similar a lo que hace Bokeh y Matplotlib en Python.
4. Newtonsoft.Json : Libreria para trabajar con JSON 

#!csharp

#r "nuget:FSharp.Data"
#r "nuget:Deedle"
#r "nuget: XPlot.Plotly, 4.0.6"
#r "nuget: XPlot.Plotly.Interactive, 4.0.6"
#r "nuget: Newtonsoft.Json"

#!markdown

# Cargando datos en un Dataframe con Deedle

### Para cargar datos desde un archivo, usaremos Deedle, importamos el namespace de Deedle, y posteriormente usamos la siguiente sintaxis:

```
using Deedle;

var df = Deedle.Frame.ReadCsv("archivo.csv", separators: ",", hasHeaders: true);

# hasHeaders en caso de que el archivo CSV cuente con headers en la primera fila
# separators indica el tipo de separadores usados en el CSV, comunmente veremos ",", ";" , "\t" , etc 
```

En este taller usaremos el archivo `tailwind_sports_db.csv` que se encuentra en el directorio de DATASET

#!csharp

using Deedle;
using System;
using System.Globalization;

var df = Deedle.Frame.ReadCsv(@"../DATASET/tailwind_sports_db.csv", separators: ",", hasHeaders: true);

#!markdown

#### Para visualizar los primeros 5 registros del dataframe, debemos usar la propiedad `Rows` y su metodo `Between`. Para imprimir usamos el metodo `Print` al final.


dataframe.<b style="color: purple;">Rows</b>.<b style="color: blue;">Between</b>(<b style="color: green;">indice 1</b>, <b style="color: orange;">indice 2</b>)

#!csharp

df.Rows.Between(0, 5).Print();

#!markdown

#### Para visualizar el listado de columnas que tiene nuestro Dataframe, usamos la propiedad `Columns` y su propiedad `Keys`. Usando el comodin especial `display` podemos visualizar el resultado en el notebook.


<b style="color: orange;">display</b><b style="color: green;">(</b>**dataframe**.<b style="color: purple;">Columns</b>.<b style="color: blue;">Keys</b><b style="color: green;">)</b>

#!csharp

display(df.Columns.Keys)

#!markdown

# Ventas Totales

De acuerdo al documento, Tailwind Sports desea conocer el total de las ventas, para ello debemos hacer la suma de nuestra columna `Ingreso` y aplicar la operacion suma. Así que para seleccionar una columna en especifico de un dataframe, usaremos la siguiente sintaxis:

<b style="color: blue;">df</b>[<b style="color: orange;">columna</b>];

Para aplicar la suma podemos la propiedad `Values`, el cual nos va regresar un Enumerable del tipo de dato, y podemos aplicar `Sum` de `System.Linq` y obtener el resultado. Pero para evitar hacer todo eso, usaremos la clase `Stats` y su metodo `sum`, al cual le pasamos la Serie seleccionada. Ejemplo:

<b style="color: green;">Stats</b>.**sum**(<b style="color: blue;">df</b>[<b style="color: orange;">columna</b>]);

#!csharp

var vTotal = Stats.sum(df["Ingreso"]);
display($"Ventas Totales: {vTotal.ToString("C")}")

#!markdown

# Integracion de las ventas totales

Si **$2,571,850.00** representa las ventas totales, queremos ver como se divide ese total entre compras y devoluciones. Para ello ocupamos filtrar por el `Tipo de Orden` . Para ello usaremos el metodo `FilterRowsBy` el cual recibe `columna a filtrar` y `valor a filtrar`.

var df_filtrado = dataframe.<b style="color: purple;">FilterRowsBy</b>(<b style="color: blue;">"columna"</b>, <b style="color: green;">"Valor"</b>)

var serieFiltrada = dataframe.<b style="color: purple;">FilterRowsBy</b>(<b style="color: blue;">"columna"</b>, <b style="color: green;">"Valor"</b>)[<b style="color: orange;">"Columna"</b>]

#!csharp

var compras = Stats.sum(df.FilterRowsBy("Tipo Orden", "Compra")["Ingreso"]);
var percCompras = compras/vTotal;
var devoluciones = Stats.sum(df.FilterRowsBy("Tipo Orden", "Devolucion")["Ingreso"]);
var percDevoluciones = devoluciones / vTotal;

display(new {
    Compra = compras.ToString("C"),
    PercCompra = percCompras.ToString("0.00%"),
    Devoluciones = devoluciones.ToString("C"),
    PercDevoluciones = percDevoluciones.ToString("0.00%"),
    Total = vTotal.ToString("C")
})

#!markdown

# Graficar las ventas mensuales

En este apartado procederemos a usar Xplot. Para ello debemos importar el namespace Xplot.Plotly , el cuál contiene todas las funciones necesarias para renderizar nuestras grafícas. A continuacion mostraremos la sintaxis basíca para una grafica de columnas o barras.

```csharp

using XPlot.Plotly;

// valores
var x = new  [] {".NET", "Python", "Scala"};
var y = new  [] {20, 20, 20};

// Generamos nuestro grafíco
var chart = Chart.Plot(
    new Bar
    {
        y = y,
        x = x,
        marker = new Marker{color = "rgb(0, 0, 109)"}
    }
);

// Le damos estilo al 
var chart_layout = new Layout.Layout{
    title="Titulo",
    xaxis =new Xaxis{
        title = "Texto Eje X"
    },
    yaxis = new Yaxis{
        title = "Texto Eje Y"
    }
};
chart.WithLayout(chart3_layout);
chart.Show(); // chart en el notebook
```

Antes de graficar, debemos agrupar nuestra informacion, para ello usaremos el metodo `GroupRowsUsing` el cual recibe una funcion anonima o lambda donde el primer elemento es el indice y el segundo elemento son los elementos de nuestro dataframe.

```csharp

var data = df.GroupRowsUsing((index, kvp) => kvp.GetAs<Type>("Columna")).Nest().Observations
    .Select(key => new {
        // operacion
    }).ToList()

```

Una vez agrupados, aplicamos el metodo Nest para crear una tupla entre el nuevo indice de la agrupacion y los valores que pertenecen a ese conjunto de datos. Posteriormente con la propiedad Observations convertimos el dataframe a tipo IEnumerable y con Select al estilo Linq armamos una nueva salida y convertimos esa salida a una Lista. Y luego pasamos a graficar nuestra información.

#!csharp

// codigo

#!csharp

// codigo
